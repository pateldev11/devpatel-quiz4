trigger:
  branches:
    include:
      - main

variables:
  buildConfiguration: 'Release'

pool:
  vmImage: 'windows-latest'

steps:

- task: Checkout@1

- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '7.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

# ðŸ”§ Restore project
- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

# ðŸ”¨ Build project
- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration)'

# ðŸ§ª Run tests with code coverage
- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: '**/*Tests.csproj'
    arguments: '--configuration $(buildConfiguration) --collect:"Code Coverage"'

# ðŸ“¦ Publish build output
- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'

# ðŸšš Upload artifact
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'

# ðŸ§ª Deploy to mocked environments
- script: echo "âœ… Deploying to Dev Environment on port 5000"
  displayName: 'Deploy to Dev Environment'

- script: echo "âœ… Deploying to QAT Environment"
  displayName: 'Deploy to QAT Environment'

- script: echo "âœ… Deploying to Staging Environment"
  displayName: 'Deploy to Staging Environment'

- script: echo "âœ… Deploying to Production Environment"
  displayName: 'Deploy to Production Environment'
