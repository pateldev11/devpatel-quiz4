trigger:
  branches:
    include:
      - main

variables:
  buildConfiguration: 'Release'
  sonarProjectKey: 'dpat1072_Devpatel_quiz4_agile'        # <-- Replace with your actual SonarQube project key
  sonarProjectName: 'Devpatel_quiz4_agile'        # <-- Replace with your actual project name

stages:
# ------------------------------------
# Stage 1: Build Stage
# ------------------------------------
- stage: Build
  displayName: 'Build Stage'
  jobs:
    - job: BuildJob
      displayName: 'Build and Compile App'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - checkout: self

        - task: NodeTool@0
          inputs:
            versionSpec: '18.x'
          displayName: 'Use Node.js 18'

        - script: |
            npm install
            npm run build
          displayName: 'Install Dependencies and Build Project'

# ------------------------------------
# Stage 2: SonarQube Code Analysis
# ------------------------------------
- stage: SonarQube
  displayName: 'Code Analysis Stage'
  dependsOn: Build
  condition: succeeded()
  jobs:
    - job: SonarQubeJob
      displayName: 'SonarQube Analysis Job'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: SonarQubePrepare@5
          inputs:
            SonarQube: 'SonarQubeServiceConnection'  # This must match the name of your Azure DevOps service connection
            scannerMode: 'CLI'
            configMode: 'manual'
            cliProjectKey: '$(sonarProjectKey)'
            cliProjectName: '$(sonarProjectName)'
            extraProperties: |
              sonar.sources=.
              sonar.javascript.lcov.reportPaths=coverage/lcov.info

        - script: |
            npm install
            npm run test -- --coverage
          displayName: 'Run Unit Tests and Generate Coverage Report'

        - task: SonarQubeAnalyze@5
          displayName: 'Run SonarQube Analysis'

        - task: SonarQubePublish@5
          inputs:
            pollingTimeoutSec: '300'
          displayName: 'Publish SonarQube Results'

# ------------------------------------
# Stage 3: Create Artifact
# ------------------------------------
- stage: Package
  displayName: 'Artifact Generation Stage'
  dependsOn: SonarQube
  condition: succeeded()
  jobs:
    - job: PackageJob
      displayName: 'Package Build Output'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: CopyFiles@2
          inputs:
            contents: '**/build/**'
            targetFolder: '$(Build.ArtifactStagingDirectory)'
          displayName: 'Copy Build Folder to Artifact Staging'

        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'drop'
            publishLocation: 'Container'
          displayName: 'Publish Artifact'

# ------------------------------------
# Stage 4: Deploy to Development
# ------------------------------------
- stage: DeployDev
  displayName: 'Deploy to Development Environment'
  dependsOn: Package
  condition: succeeded()
  jobs:
    - deployment: DevDeploy
      environment: 'dev'
      strategy:
        runOnce:
          deploy:
            steps:
              - download: current
                artifact: drop

              - script: |
                  echo "Deploying to Development Environment"
                  ls $(Pipeline.Workspace)/drop/build
                displayName: 'Mock Dev Deployment'

# ------------------------------------
# Stage 5: Deploy to QAT
# ------------------------------------
- stage: DeployQAT
  displayName: 'Deploy to QAT Environment'
  dependsOn: DeployDev
  condition: succeeded()
  jobs:
    - deployment: QATDeploy
      environment: 'qat'
      strategy:
        runOnce:
          deploy:
            steps:
              - download: current
                artifact: drop

              - script: |
                  echo "Deploying to QAT Environment"
                  ls $(Pipeline.Workspace)/drop/build
                displayName: 'Mock QAT Deployment'

# ------------------------------------
# Stage 6: Deploy to Staging
# ------------------------------------
- stage: DeployStaging
  displayName: 'Deploy to Staging Environment'
  dependsOn: DeployQAT
  condition: succeeded()
  jobs:
    - deployment: StagingDeploy
      environment: 'staging'
      strategy:
        runOnce:
          deploy:
            steps:
              - download: current
                artifact: drop

              - script: |
                  echo "Deploying to Staging Environment"
                  ls $(Pipeline.Workspace)/drop/build
                displayName: 'Mock Staging Deployment'

# ------------------------------------
# Stage 7: Deploy to Production
# ------------------------------------
- stage: DeployProd
  displayName: 'Deploy to Production Environment'
  dependsOn: DeployStaging
  condition: succeeded()
  jobs:
    - deployment: ProdDeploy
      environment: 'production'
      strategy:
        runOnce:
          deploy:
            steps:
              - download: current
                artifact: drop

              - script: |
                  echo "Deploying to Production Environment"
                  ls $(Pipeline.Workspace)/drop/build
                displayName: 'Mock Production Deployment'
